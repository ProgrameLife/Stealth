@{
    ViewData["Title"] = "SFTPSetting";
}



<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SFTPSettings- StealthUI</title>
    <link href="~/wwwroot/lib/iview/dist/styles/iview.css" rel="stylesheet" />

</head>
<body>
    <div class="container body-content">
        <div style="margin-top:10px;">
            <h2 style="height: 20px;">SFTPSettings</h2>
        </div>
        <div id="addsftpsetting" style="text-align:right;margin:10px;">
            <addmodal></addmodal>
        </div>
        <div id="tablediv" style="padding:10px;">
            <sftpsetting-row :sftpsettings="sftpsettings"></sftpsetting-row>
        </div>


        <div id="editdiv">
            <editmodal v-bind:editdata="editdata"></editmodal>
        </div>
        <hr />
        <footer>
            <p>&copy; 2018 - StealthUI</p>
        </footer>
    </div>
    <script src="~/wwwroot/lib/vue/dist/vue.js"></script>
    <script src="~/wwwroot/lib/iview/dist/iview.js"></script>
    <script src="~/wwwroot/lib/axios/dist/axios.js"></script>


    <script type="text/x-template" id="sftpsetting-tr">
        <div>
            <row :gutter="16">
                <col span="24">
                <Table border :columns="columns" :data="data"></Table>
                </col>
            </row>
            <row :gutter="16"  style="text-align:right;margin-top:3px;">
                <col span="24">
                <Page :total="total" :page-size="10" :current="current" v-on:on-change="pageing" />
                </col>
            </row>
        </div>
    </script>
    <script>
        var editVue = null;
        var tempSFTPsetting = null;
        //table组件
        Vue.component("sftpsetting-row", {
            template: "#sftpsetting-tr",
            props: ["sftpsettings"],
            data: function () {
                return {
                    columns: [
                        {
                            title: 'ID',
                            key: 'id',
                            width: 50,
                        },
                        {
                            title: 'KeyName',
                            key: 'keyName',
                        },
                        {
                            title: 'Host',
                            key: 'host',

                        },
                        {
                            title: 'Port',
                            key: 'port'
                        },
                        {
                            title: 'UserName',
                            key: 'userName',

                        },
                        {
                            title: 'Password',
                            key: 'password',
                        },
                        {
                            title: 'CertificatePath',
                            key: 'certificatePath',
                        },
                        {
                            title: 'TransferDirectory',
                            key: 'transferDirectory',
                        },
                        {
                            title: 'TransferFilePrefix',
                            key: 'transferFilePrefix',
                        },
                        {
                            title: 'FileName',
                            key: 'filename',
                        },
                        {
                            title: 'FileEncoding',
                            key: 'fileEncoding',
                        },
                        {
                            title: 'Validate',
                            key: 'validate',
                            width: 90,
                        },
                        {
                            title: 'operate',
                            key: 'action',
                            width: 100,
                            align: 'center',
                            render: (h, params) => {
                                return h('div', [
                                    h('Button', {
                                        props: {
                                            type: 'success',
                                            icon: 'md-create',
                                            size: 'small'
                                        },
                                        style: {
                                            marginRight: '5px'
                                        },
                                        on: {
                                            click: () => {
                                                this.edit(params.row)
                                            }
                                        }
                                    }),
                                    h('Button', {
                                        props: {
                                            type: 'error',
                                            icon: 'ios-trash',
                                            size: 'small',
                                        },
                                        on: {
                                            click: () => {
                                                this.delete(params.row, params.index)
                                            }
                                        }
                                    })
                                ]);
                            }
                        }
                    ],
                    data: this.sftpsettings.list,
                    total: this.sftpsettings.total,
                    current: this.sftpsettings.current
                }
            },
            methods: {
                edit: function (sftpsetting) {
                    if (editVue == null) {
                        editVue = new Vue({
                            el: "#editdiv",
                            data: {
                                editdata: {
                                    sftpsetting: sftpsetting,
                                    showmodal: true,
                                    ruleValidate: {
                                        keyName: [
                                            { required: true, message: 'keyname cannot be empty, is required', trigger: 'blur' },
                                            { type: 'string', max: 64, message: 'length less than 256', trigger: 'blur' }
                                        ],
                                        host: [
                                            { required: true, message: 'Host cannot be empty, is required', trigger: 'blur' }
                                        ],
                                        userName: [
                                            { required: true, message: 'UserName cannot be empty, is required', trigger: 'blur' }
                                        ],
                                        password: [
                                            { required: true, message: 'Password cannot be empty, is required', trigger: 'blur' }
                                        ],

                                    }
                                }
                            }
                        });
                    } else {
                        editVue.editdata.sftpsetting = sftpsetting;
                        editVue.editdata.showmodal = true;
                    }

                    //深度clone
                    tempSFTPsetting = JSON.parse(JSON.stringify(editVue.editdata.sftpsetting))
                },
                delete: function (sftpsetting, index) {

                    if (confirm("delete  " + sftpsetting.keyName + "?")) {
                        axios.delete("/removeSFTPsetting/" + sftpsetting.id)
                            .then(function (response) {
                                //判断请求状态
                                if (response.status == 200) {
                                    var returnData = response.data
                                    if (returnData.result) {
                                        getSFTP(sftpSettingVue.sftpsettings.current);
                                        // sftpSettingVue.SFTPsettings.splice(index, 1)
                                    } else {
                                        alert(returnData.messages)
                                    }
                                }
                                else {
                                    alert(response.statusText);
                                }
                            })
                            .catch(function (error) {
                                alert(error)
                                console.log(error);
                            });
                    }
                },
                pageing: function (pageindex) {
                    getSFTP(pageindex)
                }
            }
        })
        var sftpSettingVue = null;
        function getSFTP(pageindex) {
            axios.get("/sftpsettings/" + pageindex)
                .then(function (response) {
                    //判断请求状态
                    if (response.status == 200) {
                        document.getElementById("tablediv").innerHTML = ' <sftpsetting-row :sftpsettings="sftpsettings"></sftpsetting-row>'
                        var returnData = response.data
                        if (returnData.result) {
                            sftpSettingVue = new Vue({
                                el: "#tablediv",
                                data: {
                                    sftpsettings:
                                    {
                                        list: returnData.data.list,
                                        total: returnData.data.total,
                                        current: pageindex
                                    }
                                }
                            });
                        } else {
                            alert(returnData.message)
                        }
                    }
                    else {
                        alert(response.statusText);
                    }
                })
                .catch(function (error) {
                    alert(error)
                    console.log(error);
                });
        }
        getSFTP(1);
    </script>

    <script type="text/x-template" id="editmodal-div">
        <Modal v-model="editdata.showmodal"
               title="Edit"
               width="800px"
               :mask-closable="false">
            <div>
                <Form ref="editdata.sftpsetting" :model="editdata.sftpsetting" :rules="editdata.ruleValidate" label-position="top">
                    <row :gutter="16">
                        <Col span="24">
                        <FormItem label="KeyName" prop="keyName">
                            <Input v-model="editdata.sftpsetting.keyName"></Input>
                        </FormItem>
                        </Col>
                    </row>
                    <row :gutter="16">
                        <Col span="12">
                        <FormItem label="Host" prop="host">
                            <Input v-model="editdata.sftpsetting.host"></Input>
                        </FormItem>
                        </Col>
                        <Col span="12">
                        <FormItem label="Port" prop="port">
                            <InputNumber v-model="editdata.sftpsetting.port" :min="10" :step="1"></InputNumber>
                        </FormItem>
                        </Col>
                    </row>
                    <row :gutter="16">
                        <Col span="12">
                        <FormItem label="UserName" prop="userName">
                            <Input v-model="editdata.sftpsetting.userName"></Input>
                        </FormItem>
                        </Col>
                        <Col span="12">
                        <FormItem label="Password" prop="password">
                            <Input v-model="editdata.sftpsetting.password"></Input>
                        </FormItem>
                        </Col>
                    </row>
                    <row :gutter="16">
                        <Col span="12">
                        <FormItem label="CertificatePath" prop="certificatePath">
                            <Input v-model="editdata.sftpsetting.certificatePath"></Input>
                        </FormItem>
                        </Col>
                        <Col span="12">
                        <FormItem label="TransferDirectory" prop="transferDirectory">
                            <Input v-model="editdata.sftpsetting.transferDirectory"></Input>
                        </FormItem>
                        </Col>
                    </row>
                    <row :gutter="16">
                        <Col span="12">
                        <FormItem label="TransferFilePrefix" prop="transferFilePrefix">
                            <Input v-model="editdata.sftpsetting.transferFilePrefix"></Input>
                        </FormItem>
                        </Col>
                        <Col span="12">
                        <FormItem label="FileName" prop="fileName">
                            <Input v-model="editdata.sftpsetting.fileName"></Input>
                        </FormItem>
                        </Col>
                    </row>
                    <row :gutter="16">
                        <Col span="12">
                        <FormItem label="FileEncoding" prop="fileEncoding">
                            <Input v-model="editdata.sftpsetting.fileEncoding"></Input>
                        </FormItem>
                        </Col>
                        <Col span="12">
                        <FormItem label="Validate">
                            <i-switch v-model="editdata.sftpsetting.validate" size="large">
                                <span slot="valid">true</span>
                                <span slot="invalid">false</span>
                            </i-switch>
                        </FormItem>
                        </Col>
                    </row>
                </Form>
            </div>
            <div slot="footer">
                <Button type="text" size="large" v-on:click="modalCancel">Cancel</Button>
                <Button type="primary" size="large" v-on:click="modalOk">Sava</Button>
            </div>
        </Modal>
    </script>
    <script>
        Vue.component("editmodal", {
            template: "#editmodal-div",
            props: ["editdata"],
            methods: {
                modalOk() {
                    this.$refs['editdata.sftpsetting'].validate((valid) => {
                        if (valid) {
                            console.log(this.editdata.sftpsetting)
                            axios.put("/modifysftpsetting", this.editdata.sftpsetting)
                                .then(function (response) {
                                    //判断请求状态
                                    if (response.status == 200) {
                                        var returnData = response.data;
                                        if (returnData.result) {
                                            editVue.editdata.showmodal = false;
                                        } else {
                                            alert(returnData.messages);
                                        }
                                    }
                                    else {
                                        alert(response.statusText);
                                    }
                                })
                                .catch(function (error) {
                                    alert(error)
                                    console.log(error);
                                });

                        } else {
                            this.$Message.error('validate failure!');
                        }
                    })
                },
                modalCancel() {
                    for (var key in this.editdata.SFTPsetting) {
                        this.editdata.SFTPsetting[key] = tempSFTPsetting[key];
                    }
                    editVue.editdata.showmodal = false;
                }
            }
        })
    </script>


    <script type="text/x-template" id="addmodal-div">
        <div>
            <Button type="primary" v-on:click="showmodal = true">Add</Button>
            <Modal v-model="showmodal"
                   title="Add"
                   width="800px"
                   :mask-closable="false">
                <div>
                    <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" label-position="top">
                        <row :gutter="16">
                            <Col span="24">
                            <FormItem label="KeyName" prop="keyName">
                                <Input v-model="formValidate.keyName"></Input>
                            </FormItem>
                            </Col>
                        </row>
                        <row :gutter="16">
                            <Col span="12">
                            <FormItem label="Host" prop="host">
                                <Input v-model="formValidate.host"></Input>
                            </FormItem>
                            </Col>
                            <Col span="12">
                            <FormItem label="Port" prop="port">
                                <InputNumber v-model="formValidate.port" :min="10" :step="1"></InputNumber>
                            </FormItem>
                            </Col>
                        </row>
                        <row :gutter="16">
                            <Col span="12">
                            <FormItem label="UserName" prop="userName">
                                <Input v-model="formValidate.userName"></Input>
                            </FormItem>
                            </Col>
                            <Col span="12">
                            <FormItem label="Password" prop="password">
                                <Input v-model="formValidate.password"></Input>
                            </FormItem>
                            </Col>
                        </row>
                        <row :gutter="16">
                            <Col span="12">
                            <FormItem label="CertificatePath" prop="certificatePath">
                                <Input v-model="formValidate.certificatePath"></Input>
                            </FormItem>
                            </Col>
                            <Col span="12">
                            <FormItem label="TransferDirectory" prop="transferDirectory">
                                <Input v-model="formValidate.transferDirectory"></Input>
                            </FormItem>
                            </Col>
                        </row>
                        <row :gutter="16">
                            <Col span="12">
                            <FormItem label="TransferFilePrefix" prop="transferFilePrefix">
                                <Input v-model="formValidate.transferFilePrefix"></Input>
                            </FormItem>
                            </Col>
                            <Col span="12">
                            <FormItem label="FileName" prop="fileName">
                                <Input v-model="formValidate.fileName"></Input>
                            </FormItem>
                            </Col>
                        </row>
                        <row :gutter="16">
                            <Col span="12">
                            <FormItem label="FileEncoding" prop="fileEncoding">
                                <Input v-model="formValidate.fileEncoding"></Input>
                            </FormItem>
                            </Col>
                            <Col span="12">
                            <FormItem label="Vaidate">
                                <i-switch v-model="formValidate.validate" size="large">
                                    <span slot="valid">true</span>
                                    <span slot="invalid">false</span>
                                </i-switch>
                            </FormItem>
                            </Col>
                        </row>
                    </Form>
                </div>
                <div slot="footer">
                    <Button type="text" size="large" v-on:click="modalCancel">Cancel</Button>
                    <Button type="primary" size="large" v-on:click="modalOk">Sava</Button>
                </div>
            </Modal>
        </div>
    </script>
    <script>
        Vue.component("addmodal", {
            template: "#addmodal-div",
            data: function () {
                return {
                    showmodal: false,
                    formValidate: {
                        id: 0,
                        keyName: "",
                        host: "",
                        port: 0,
                        userName: "",
                        password: "",
                        subject: "",
                        certificatePath: "",
                        transferDirectory: "",
                        transferFilePrefix: "",
                        fileName: "",
                        fileEncoding: "",
                        validate: false
                    },
                    ruleValidate: {
                        keyName: [
                            { required: true, message: 'keyname cannot be empty, is required', trigger: 'blur' },
                            { type: 'string', max: 64, message: 'length less than 256', trigger: 'blur' }
                        ],
                        host: [
                            { required: true, message: 'Host cannot be empty, is required', trigger: 'blur' }
                        ],
                        userName: [
                            { required: true, message: 'UserName cannot be empty, is required', trigger: 'blur' }
                        ],
                        password: [
                            { required: true, message: 'Password cannot be empty, is required', trigger: 'blur' }
                        ],
                    }
                }
            },
            methods: {
                modalOk() {
                    this.$refs['formValidate'].validate((valid) => {
                        if (valid) {
                            var obj = this;
                            addSFTP(this.formValidate, function (newSFTPSetting) {
                                console.log(newSFTPSetting)
                                //深度clone
                                // var newSettlemtntSetting = JSON.parse(JSON.stringify(obj.formValidate))
                                //sftpSettingVue.sftpsettings.push(newSFTPSetting)
                                getSFTP(sftpSettingVue.sftpsettings.current);
                                obj.$refs['formValidate'].resetFields();
                                obj.showmodal = false;
                            });
                        } else {
                            this.$Message.error('validate failure!');
                        }
                    })
                },
                modalCancel() {
                    this.showmodal = false;
                }
            }
        })

        function addSFTP(sftpsetting, callback) {
            axios.post("/addsftpsetting", sftpsetting)
                .then(function (response) {
                    //判断请求状态
                    if (response.status == 200) {
                        var returnData = response.data;
                        if (returnData.result) {
                            callback(returnData.data);
                        } else {
                            alert(returnData.message);
                        }
                    }
                    else {
                        alert(response.statusText);
                    }
                })
                .catch(function (error) {
                    alert(error);
                    console.log(error);
                });
        }
        new Vue({
            el: "#addsftpsetting"
        });
    </script>
</body>
</html>